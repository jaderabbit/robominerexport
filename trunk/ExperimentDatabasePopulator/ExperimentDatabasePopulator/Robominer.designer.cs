#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExperimentDatabasePopulator
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Experiment")]
	public partial class RobominerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAlgorithm(Algorithm instance);
    partial void UpdateAlgorithm(Algorithm instance);
    partial void DeleteAlgorithm(Algorithm instance);
    partial void InsertEnvironment(Environment instance);
    partial void UpdateEnvironment(Environment instance);
    partial void DeleteEnvironment(Environment instance);
    partial void InsertEnvironmentType(EnvironmentType instance);
    partial void UpdateEnvironmentType(EnvironmentType instance);
    partial void DeleteEnvironmentType(EnvironmentType instance);
    partial void InsertExperiment(Experiment instance);
    partial void UpdateExperiment(Experiment instance);
    partial void DeleteExperiment(Experiment instance);
    partial void InsertPerformanceMeasure(PerformanceMeasure instance);
    partial void UpdatePerformanceMeasure(PerformanceMeasure instance);
    partial void DeletePerformanceMeasure(PerformanceMeasure instance);
    partial void InsertResult(Result instance);
    partial void UpdateResult(Result instance);
    partial void DeleteResult(Result instance);
    #endregion
		
		public RobominerDataContext() : 
				base(global::ExperimentDatabasePopulator.Properties.Settings.Default.ExperimentConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RobominerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RobominerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RobominerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RobominerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Algorithm> Algorithms
		{
			get
			{
				return this.GetTable<Algorithm>();
			}
		}
		
		public System.Data.Linq.Table<Environment> Environments
		{
			get
			{
				return this.GetTable<Environment>();
			}
		}
		
		public System.Data.Linq.Table<EnvironmentType> EnvironmentTypes
		{
			get
			{
				return this.GetTable<EnvironmentType>();
			}
		}
		
		public System.Data.Linq.Table<Experiment> Experiments
		{
			get
			{
				return this.GetTable<Experiment>();
			}
		}
		
		public System.Data.Linq.Table<PerformanceMeasure> PerformanceMeasures
		{
			get
			{
				return this.GetTable<PerformanceMeasure>();
			}
		}
		
		public System.Data.Linq.Table<Result> Results
		{
			get
			{
				return this.GetTable<Result>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Algorithm")]
	public partial class Algorithm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<Result> _Results;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Algorithm()
		{
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(20)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_Result", Storage="_Results", ThisKey="id", OtherKey="algorithmid")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Algorithm = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Environment")]
	public partial class Environment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _size;
		
		private System.Nullable<int> _objects;
		
		private System.Nullable<double> _ratio;
		
		private int _id;
		
		private int _type;
		
		private EntitySet<Result> _Results;
		
		private EntityRef<EnvironmentType> _EnvironmentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsizeChanging(System.Nullable<int> value);
    partial void OnsizeChanged();
    partial void OnobjectsChanging(System.Nullable<int> value);
    partial void OnobjectsChanged();
    partial void OnratioChanging(System.Nullable<double> value);
    partial void OnratioChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntypeChanging(int value);
    partial void OntypeChanged();
    #endregion
		
		public Environment()
		{
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			this._EnvironmentType = default(EntityRef<EnvironmentType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_size", DbType="Int")]
		public System.Nullable<int> size
		{
			get
			{
				return this._size;
			}
			set
			{
				if ((this._size != value))
				{
					this.OnsizeChanging(value);
					this.SendPropertyChanging();
					this._size = value;
					this.SendPropertyChanged("size");
					this.OnsizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_objects", DbType="Int")]
		public System.Nullable<int> objects
		{
			get
			{
				return this._objects;
			}
			set
			{
				if ((this._objects != value))
				{
					this.OnobjectsChanging(value);
					this.SendPropertyChanging();
					this._objects = value;
					this.SendPropertyChanged("objects");
					this.OnobjectsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ratio", DbType="Float")]
		public System.Nullable<double> ratio
		{
			get
			{
				return this._ratio;
			}
			set
			{
				if ((this._ratio != value))
				{
					this.OnratioChanging(value);
					this.SendPropertyChanging();
					this._ratio = value;
					this.SendPropertyChanged("ratio");
					this.OnratioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Int NOT NULL")]
		public int type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					if (this._EnvironmentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Environment_Result", Storage="_Results", ThisKey="id", OtherKey="environmentid")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EnvironmentType_Environment", Storage="_EnvironmentType", ThisKey="type", OtherKey="id", IsForeignKey=true)]
		public EnvironmentType EnvironmentType
		{
			get
			{
				return this._EnvironmentType.Entity;
			}
			set
			{
				EnvironmentType previousValue = this._EnvironmentType.Entity;
				if (((previousValue != value) 
							|| (this._EnvironmentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EnvironmentType.Entity = null;
						previousValue.Environments.Remove(this);
					}
					this._EnvironmentType.Entity = value;
					if ((value != null))
					{
						value.Environments.Add(this);
						this._type = value.id;
					}
					else
					{
						this._type = default(int);
					}
					this.SendPropertyChanged("EnvironmentType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Environment = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Environment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnvironmentType")]
	public partial class EnvironmentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<Environment> _Environments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public EnvironmentType()
		{
			this._Environments = new EntitySet<Environment>(new Action<Environment>(this.attach_Environments), new Action<Environment>(this.detach_Environments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EnvironmentType_Environment", Storage="_Environments", ThisKey="id", OtherKey="type")]
		public EntitySet<Environment> Environments
		{
			get
			{
				return this._Environments;
			}
			set
			{
				this._Environments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Environments(Environment entity)
		{
			this.SendPropertyChanging();
			entity.EnvironmentType = this;
		}
		
		private void detach_Environments(Environment entity)
		{
			this.SendPropertyChanging();
			entity.EnvironmentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Experiment")]
	public partial class Experiment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<double> _division;
		
		private System.Nullable<int> _robots;
		
		private System.Nullable<int> _maxpath;
		
		private int _id;
		
		private EntitySet<Result> _Results;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndivisionChanging(System.Nullable<double> value);
    partial void OndivisionChanged();
    partial void OnrobotsChanging(System.Nullable<int> value);
    partial void OnrobotsChanged();
    partial void OnmaxpathChanging(System.Nullable<int> value);
    partial void OnmaxpathChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public Experiment()
		{
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_division", DbType="Float")]
		public System.Nullable<double> division
		{
			get
			{
				return this._division;
			}
			set
			{
				if ((this._division != value))
				{
					this.OndivisionChanging(value);
					this.SendPropertyChanging();
					this._division = value;
					this.SendPropertyChanged("division");
					this.OndivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_robots", DbType="Int")]
		public System.Nullable<int> robots
		{
			get
			{
				return this._robots;
			}
			set
			{
				if ((this._robots != value))
				{
					this.OnrobotsChanging(value);
					this.SendPropertyChanging();
					this._robots = value;
					this.SendPropertyChanged("robots");
					this.OnrobotsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maxpath", DbType="Int")]
		public System.Nullable<int> maxpath
		{
			get
			{
				return this._maxpath;
			}
			set
			{
				if ((this._maxpath != value))
				{
					this.OnmaxpathChanging(value);
					this.SendPropertyChanging();
					this._maxpath = value;
					this.SendPropertyChanged("maxpath");
					this.OnmaxpathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Experiment_Result", Storage="_Results", ThisKey="id", OtherKey="experimentid")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Experiment = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Experiment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PerformanceMeasure")]
	public partial class PerformanceMeasure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<Result> _Results;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public PerformanceMeasure()
		{
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PerformanceMeasure_Result", Storage="_Results", ThisKey="id", OtherKey="measureid")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceMeasure = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceMeasure = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Results")]
	public partial class Result : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private int _experimentid;
		
		private int _measureid;
		
		private int _algorithmid;
		
		private int _environmentid;
		
		private int _iteration;
		
		private int _sample;
		
		private System.Nullable<double> _value;
		
		private EntityRef<Algorithm> _Algorithm;
		
		private EntityRef<Environment> _Environment;
		
		private EntityRef<Experiment> _Experiment;
		
		private EntityRef<PerformanceMeasure> _PerformanceMeasure;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnexperimentidChanging(int value);
    partial void OnexperimentidChanged();
    partial void OnmeasureidChanging(int value);
    partial void OnmeasureidChanged();
    partial void OnalgorithmidChanging(int value);
    partial void OnalgorithmidChanged();
    partial void OnenvironmentidChanging(int value);
    partial void OnenvironmentidChanged();
    partial void OniterationChanging(int value);
    partial void OniterationChanged();
    partial void OnsampleChanging(int value);
    partial void OnsampleChanged();
    partial void OnvalueChanging(System.Nullable<double> value);
    partial void OnvalueChanged();
    #endregion
		
		public Result()
		{
			this._Algorithm = default(EntityRef<Algorithm>);
			this._Environment = default(EntityRef<Environment>);
			this._Experiment = default(EntityRef<Experiment>);
			this._PerformanceMeasure = default(EntityRef<PerformanceMeasure>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_experimentid", DbType="Int NOT NULL")]
		public int experimentid
		{
			get
			{
				return this._experimentid;
			}
			set
			{
				if ((this._experimentid != value))
				{
					if (this._Experiment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnexperimentidChanging(value);
					this.SendPropertyChanging();
					this._experimentid = value;
					this.SendPropertyChanged("experimentid");
					this.OnexperimentidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_measureid", DbType="Int NOT NULL")]
		public int measureid
		{
			get
			{
				return this._measureid;
			}
			set
			{
				if ((this._measureid != value))
				{
					if (this._PerformanceMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmeasureidChanging(value);
					this.SendPropertyChanging();
					this._measureid = value;
					this.SendPropertyChanged("measureid");
					this.OnmeasureidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_algorithmid", DbType="Int NOT NULL")]
		public int algorithmid
		{
			get
			{
				return this._algorithmid;
			}
			set
			{
				if ((this._algorithmid != value))
				{
					if (this._Algorithm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnalgorithmidChanging(value);
					this.SendPropertyChanging();
					this._algorithmid = value;
					this.SendPropertyChanged("algorithmid");
					this.OnalgorithmidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_environmentid", DbType="Int NOT NULL")]
		public int environmentid
		{
			get
			{
				return this._environmentid;
			}
			set
			{
				if ((this._environmentid != value))
				{
					if (this._Environment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnenvironmentidChanging(value);
					this.SendPropertyChanging();
					this._environmentid = value;
					this.SendPropertyChanged("environmentid");
					this.OnenvironmentidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iteration", DbType="Int NOT NULL")]
		public int iteration
		{
			get
			{
				return this._iteration;
			}
			set
			{
				if ((this._iteration != value))
				{
					this.OniterationChanging(value);
					this.SendPropertyChanging();
					this._iteration = value;
					this.SendPropertyChanged("iteration");
					this.OniterationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sample", DbType="Int NOT NULL")]
		public int sample
		{
			get
			{
				return this._sample;
			}
			set
			{
				if ((this._sample != value))
				{
					this.OnsampleChanging(value);
					this.SendPropertyChanging();
					this._sample = value;
					this.SendPropertyChanged("sample");
					this.OnsampleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="Float")]
		public System.Nullable<double> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Algorithm_Result", Storage="_Algorithm", ThisKey="algorithmid", OtherKey="id", IsForeignKey=true)]
		public Algorithm Algorithm
		{
			get
			{
				return this._Algorithm.Entity;
			}
			set
			{
				Algorithm previousValue = this._Algorithm.Entity;
				if (((previousValue != value) 
							|| (this._Algorithm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Algorithm.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._Algorithm.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._algorithmid = value.id;
					}
					else
					{
						this._algorithmid = default(int);
					}
					this.SendPropertyChanged("Algorithm");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Environment_Result", Storage="_Environment", ThisKey="environmentid", OtherKey="id", IsForeignKey=true)]
		public Environment Environment
		{
			get
			{
				return this._Environment.Entity;
			}
			set
			{
				Environment previousValue = this._Environment.Entity;
				if (((previousValue != value) 
							|| (this._Environment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Environment.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._Environment.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._environmentid = value.id;
					}
					else
					{
						this._environmentid = default(int);
					}
					this.SendPropertyChanged("Environment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Experiment_Result", Storage="_Experiment", ThisKey="experimentid", OtherKey="id", IsForeignKey=true)]
		public Experiment Experiment
		{
			get
			{
				return this._Experiment.Entity;
			}
			set
			{
				Experiment previousValue = this._Experiment.Entity;
				if (((previousValue != value) 
							|| (this._Experiment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Experiment.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._Experiment.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._experimentid = value.id;
					}
					else
					{
						this._experimentid = default(int);
					}
					this.SendPropertyChanged("Experiment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PerformanceMeasure_Result", Storage="_PerformanceMeasure", ThisKey="measureid", OtherKey="id", IsForeignKey=true)]
		public PerformanceMeasure PerformanceMeasure
		{
			get
			{
				return this._PerformanceMeasure.Entity;
			}
			set
			{
				PerformanceMeasure previousValue = this._PerformanceMeasure.Entity;
				if (((previousValue != value) 
							|| (this._PerformanceMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PerformanceMeasure.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._PerformanceMeasure.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._measureid = value.id;
					}
					else
					{
						this._measureid = default(int);
					}
					this.SendPropertyChanged("PerformanceMeasure");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
